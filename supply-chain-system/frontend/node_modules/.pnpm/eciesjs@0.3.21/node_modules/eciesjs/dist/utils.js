"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.remove0x = remove0x;
exports.decodeHex = decodeHex;
exports.getValidSecret = getValidSecret;
exports.aesEncrypt = aesEncrypt;
exports.aesDecrypt = aesDecrypt;
var node_crypto_1 = require("node:crypto");
var secp256k1_1 = __importDefault(require("secp256k1"));
var consts_1 = require("./consts");
function remove0x(hex) {
    if (hex.startsWith("0x") || hex.startsWith("0X")) {
        return hex.slice(2);
    }
    return hex;
}
function decodeHex(hex) {
    return Buffer.from(remove0x(hex), "hex");
}
function getValidSecret() {
    var key;
    do {
        key = (0, node_crypto_1.randomBytes)(consts_1.SECRET_KEY_LENGTH);
    } while (!secp256k1_1.default.privateKeyVerify(key));
    return key;
}
function aesEncrypt(key, plainText) {
    var nonce = (0, node_crypto_1.randomBytes)(consts_1.AES_IV_LENGTH);
    var cipher = (0, node_crypto_1.createCipheriv)("aes-256-gcm", key, nonce);
    var encrypted = Buffer.concat([cipher.update(plainText), cipher.final()]);
    var tag = cipher.getAuthTag();
    return Buffer.concat([nonce, tag, encrypted]);
}
function aesDecrypt(key, cipherText) {
    var nonce = cipherText.subarray(0, consts_1.AES_IV_LENGTH);
    var tag = cipherText.subarray(consts_1.AES_IV_LENGTH, consts_1.AES_IV_PLUS_TAG_LENGTH);
    var ciphered = cipherText.subarray(consts_1.AES_IV_PLUS_TAG_LENGTH);
    var decipher = (0, node_crypto_1.createDecipheriv)("aes-256-gcm", key, nonce);
    decipher.setAuthTag(tag);
    return Buffer.concat([decipher.update(ciphered), decipher.final()]);
}
